      const fetch = require('node-fetch');

exports.handler = async function(event, context) {
  // ‚ö° CORS - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏–∑ –±—Ä–∞—É–∑–µ—Ä–æ–≤
  if (event.httpMethod === 'OPTIONS') {
    return { 
      statusCode: 200, 
      headers: { 
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type', 
        'Access-Control-Allow-Methods': 'POST, OPTIONS'
      }, 
      body: '' 
    };
  }

  if (event.httpMethod !== 'POST') {
    return { 
      statusCode: 405, 
      body: JSON.stringify({ error: '–¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã' }) 
    };
  }

  try {
    const { name, phone, address, items, total, user_id } = JSON.parse(event.body);
    const BOT_TOKEN = process.env.BOT_TOKEN;
    
    // üéØ –ù–ê–°–¢–†–û–ô–ö–ê –ß–ê–¢–û–í (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï ID!)
    const ADMIN_CHAT_ID = 413921406;       // üëë –í–∞—à –ª–∏—á–Ω—ã–π —á–∞—Ç
    const COURIER_CHAT_ID = -4826021986;   // üö¥ –ß–∞—Ç –∫—É—Ä—å–µ—Ä–æ–≤
    const MANAGER_CHAT_ID = -4856512386;   // üìä –ß–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤

    // ‚ú® –§–û–†–ú–ê–¢–ò–†–£–ï–ú –¢–ï–ö–°–¢
    let text = `üë§ *–ò–º—è:* ${name}\\n`;
    text += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* [${phone}](tel:${phone}) ‚≠ê\\n`;
    text += `üè† *–ê–¥—Ä–µ—Å:* ${address}\\n\\n`;
    text += `üçΩ *–ë–ª—é–¥–∞:*\\n`;
    
    items.forEach(item => {
      text += `‚Ä¢ ${item.name} \\(${item.price}‚ÇΩ\\)\\n`;
    });
    
    text += `\\nüí∞ *–ò—Ç–æ–≥–æ:* ${total}‚ÇΩ`;

    // üé≠ –†–ê–ó–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –†–ê–ó–ù–´–• –†–û–õ–ï–ô
    const adminText = `üì¶ *–ù–û–í–´–ô –ó–ê–ö–ê–ó!*\\n\\n${text}`;
    const courierText = `üö¥ *–ó–ê–ö–ê–ó –î–õ–Ø –ö–£–†–¨–ï–†–ê*\\n\\n${text}\\n\\nüìû *–ó–≤–æ–Ω–∏—Ç—å:* [${phone}](tel:${phone})`;
    const managerText = `üìä *–ó–ê–ö–ê–ó –î–õ–Ø –ú–ï–ù–ï–î–ñ–ï–†–ê*\\n\\n${text}`;

    // üì§ –û–¢–ü–†–ê–í–ö–ê –í–û –í–°–ï –ß–ê–¢–´
    await sendToTelegram(BOT_TOKEN, ADMIN_CHAT_ID, adminText);
    await sendToTelegram(BOT_TOKEN, COURIER_CHAT_ID, courierText);
    await sendToTelegram(BOT_TOKEN, MANAGER_CHAT_ID, managerText);

    return {
      statusCode: 200,
      headers: { 'Access-Control-Allow-Origin': '*' },
      body: JSON.stringify({ success: true })
    };

  } catch (error) {
    return {
      statusCode: 500,
      headers: { 'Access-Control-Allow-Origin': '*' },
      body: JSON.stringify({ error: error.message })
    };
  }
};

// üì® –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò
async function sendToTelegram(botToken, chatId, text) {
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: text,
      parse_mode: 'MarkdownV2',
      disable_web_page_preview: true
    })
  });
  
  const result = await response.json();
  
  if (!result.ok) {
    throw new Error(`Telegram API error: ${result.description}`);
  }
  
  return result;
}
